security:
    enable_authenticator_manager: true

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username

    firewalls:
        login:
          pattern: ^/api/login
          stateless: true
          json_login:
            check_path: /api/login_check
            success_handler: lexik_jwt_authentication.handler.authentication_success
            failure_handler: lexik_jwt_authentication.handler.authentication_failure

        refresh_token:
          pattern: ^/api/token/refresh
          stateless: true
          refresh_jwt:
            check_path: /api/token/refresh

        api:
          pattern:   ^/api/
          stateless: true
          jwt: ~

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                # "app_login" is the name of the route created previously
                login_path: signIn
                check_path: signIn
                failure_path: signIn
            login_throttling: null
            logout:
                path: signOut
                target: home

        secured_area:
            form_login:
                enable_csrf: true


    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/api/v1/docs, roles: PUBLIC_ACCESS }
         - { path: ^/api/(login|token/refresh), roles: PUBLIC_ACCESS }
         - { path: ^/api/, roles: IS_AUTHENTICATED_FULLY }
         - { path: ^/apiToken, roles: ROLE_USER }
         - { path: ^/apiSettings, roles: ROLE_USER }
         - { path: ^/reviews, roles: ROLE_USER }
         - { path: ^/addReview, roles: ROLE_USER }
         - { path: ^/editReview, roles: ROLE_USER }
         - { path: ^/deleteReview, roles: ROLE_USER }
         - { path: ^/vote, roles: ROLE_USER }
         - { path: ^/deleteUser, roles: ROLE_USER }
         - { path: ^/directors, roles: ROLE_ADMIN }
         - { path: ^/actors, roles: ROLE_ADMIN }
         - { path: ^/addMovie, roles: ROLE_ADMIN }
         - { path: ^/deleteMovie, roles: ROLE_ADMIN }
         - { path: ^/restrictUser, roles: ROLE_ADMIN }
         - { path: ^/makeAdmin, roles: ROLE_SUPER_ADMIN }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
